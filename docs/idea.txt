temp vscode plugin
option to export to project
templates for projects
option to save one as a template
warning after they close the vscode window about "do you want to save your project" if they haven't already exported it

vscode process is wrapped and tracked by pid in a `~/.letstry` file.
we monitor that process, and when it closes, we ask the user if they want to save their project.

when you create a new project, it creates the directory and opens vscode in that directory.
the user can create a new project with `lt new`, they can specify which template to use.
when you start a new project you can optionally specify a name for the session.
if one is not specified, the pid will be used.
if they do not specify a template, the default template will be used.
the default template can be updated using `lt template default set <template>`
you can check the template default using `lt template default`
you can export templates using `lt template export <template> <path>`
you can import templates using `lt template import <path>`
you can list templates using `lt template list`
you can remove templates using `lt template remove <template>`

you can tag templates with languages, and when you create a new project, you can specify a language, and it will list all templates that match that language.
you can also specify a template when you create a new project, and it will use that template.

to tag a template with a language, you can use `lt template tag <template> <language>`
to remove a tag from a template, you can use `lt template untag <template> <language>`
to list all tags for a template, you can use `lt template tags <template>`
to list all templates for a language, you can use `lt template list <language>`

the default template is default to an empty directory, which in itself is a template called "empty", but the empty
template is baked into the program and cannot be removed.
all other templates can be managed, and you can export, import, or list them.

each vscode process should be tracked, and can be named


you can list sessions with `lt session list` and you will get their name ( if any ), pid, and template.
you can kill a session with `lt session kill <name|pid>`
you can export a session with `lt session export <name|pid> <path>`
you can save a session as a template using `lt session save <name|pid> <template-name>`

i don't see why it only has to wrap vscode, why not support other editors (or any program you want, any process for that matter)


discord message:

n:
i think the idea branched off of me wanting something and not having it, and my personal workflow is vscode. so it's just the first thing that came to mind and i went with it
nah, it's not even a github code space or even a repo
it's just a vscode instance, and an empty directory.
the directory can be seeded with a template, or a github repository, or nothing. 
when you close vscode, the directory is deleted
alternately, you can choose to save what you've worked on either to disk or to a github repository
or you can save it as a template for future use
that's the core idea.
essentially, a mix of create-react-app and those "sandboxes" you'll find online, but easier access and more features surrounding managing it. 

j:
and you're in your local env that you are used to

n:
exactly
it would make my workflow so much cleaner
again, i'm sure either a tool  or combination of tools exists that already does this or something similar, but i like being able to build it myself the exact way i want for my workflow lol

j:
im actually not sure if it does
at least i haven't heard of it
There is a repo i saw recntly that is a create-react-app but for go but not the temp project thing you're doing
and this is language agnostic

n:
i'm thinking something like this for the general use command:
letstry <name> -with <template/repo>
for example:
letstry timelines-test -with gitlab.com/pulsarinformatics/fatiguemeter.git@master
or you could do like
letstry timelines-test -with C:\git-repos\fatiguemeter
which would just duplicate the existing directory

j:
def support git + local repo in that -with tag
maybe -from is better than -with 
or just -template
makes it more explicit

n:
yeah, but i want the command to be easy to use.

I want the -with (or -from) flag to allow an argument of either remote git repository, a local directory, or one of the names of the templates you've saved or imported into letstry.

letstry timelines-test -from <path>
letstry timelines-test -from <repo-url>
letstry timelines-test -from t:<template-name> 

or something like that.
and i plan to alias letstry to lt.

the path and repo url would be easy enough to discern from eachother, but i think the t: prefix would be useful since repo names can be any string. 

or -from could be used for directory / git repo url
and -with could be used for template
